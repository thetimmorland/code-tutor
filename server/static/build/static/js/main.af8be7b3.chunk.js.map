{"version":3,"sources":["Sketch.js","Editor.js","Log.js","useShareDB.js","App.js","serviceWorker.js","index.js"],"names":["bridgeScript","replace","Sketch","props","value","setLog","useEffect","window","addEventListener","message","data","source","log","payload","srcDoc","DOMParser","parseFromString","style","createElement","type","innerHTML","head","appendChild","p5","src","bridge","sketch","title","documentElement","outerHTML","frameBorder","width","height","sandbox","Editor","mode","theme","tabSize","onChange","newValue","console","handleChange","debounceChangePeriod","annotations","Log","logEnd","useRef","scrollIntoView","className","map","entry","idx","key","ref","el","template","App","id","useState","doc","setDoc","setData","socket","WebSocket","ShareDB","Connection","get","fetch","create","subscribe","unsubscribe","join","event","useShareDB","frozenSketch","setFrozenSketch","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.af8be7b3.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nconst bridgeScript = `\n  window.onerror = function (text, url, row, column, error) {\n    const payload = row + \":\" + column + \" \" + text;\n    window.parent.postMessage({ source: \"code-tutor-bridge\", payload}, '*');\n    return true;\n  };\n\n  var console = {\n    log: function () {\n      let payload = [];\n      for (var i = 0, n = arguments.length; i < n; i++) {\n        payload.push(arguments[i]);\n      }\n      window.parent.postMessage({ source: \"code-tutor-bridge\", payload }, '*');\n    }\n  };\n  `.replace(/\\n/g, \"\");\n\nexport default function Sketch(props) {\n  const value = props.value || \"\";\n  const setLog = props.setLog || (() => {});\n\n  useEffect(() => {\n    window.addEventListener(\"message\", (message) => {\n      if (message.data.source === \"code-tutor-bridge\") {\n        setLog((log) => [...log, message.data.payload]);\n      }\n    });\n  }, [setLog]);\n\n  const parser = new DOMParser();\n\n  const srcDoc = parser.parseFromString(\n    \"<html><head></head><body></body></html>\",\n    \"text/html\"\n  );\n\n  const style = srcDoc.createElement(\"style\");\n  style.type = \"text/css\";\n  style.innerHTML = \"body { margin: 0px; padding 0px; font-size: 0 }\";\n  srcDoc.head.appendChild(style);\n\n  const p5 = srcDoc.createElement(\"script\");\n  p5.src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.0.0/p5.js\";\n  srcDoc.head.appendChild(p5);\n\n  const bridge = srcDoc.createElement(\"script\");\n  bridge.innerHTML = bridgeScript;\n  srcDoc.head.appendChild(bridge);\n\n  const sketch = srcDoc.createElement(\"script\");\n  sketch.innerHTML = value;\n  srcDoc.head.appendChild(sketch);\n\n  return (\n    <iframe\n      title=\"sketch\"\n      srcDoc={srcDoc.documentElement.outerHTML}\n      frameBorder={0}\n      style={{ width: \"100%\", height: \"100%\" }}\n      sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-forms allow-modals\"\n    />\n  );\n}\n","import React from \"react\";\n\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/webpack-resolver.js\";\n\nexport default function Editor(props) {\n  const handleChange = (newValue) => {\n    console.log(props.value, newValue);\n  };\n\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"github\"\n      value={props.value}\n      tabSize={2}\n      onChange={(newValue) => handleChange(newValue)}\n      debounceChangePeriod={500}\n      annotations={[]}\n      width=\"100%\"\n      height=\"100%\"\n    />\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nexport default function Log(props) {\n  const log = props.value || [];\n  var logEnd = useRef(null);\n\n  useEffect(() => {\n    logEnd.scrollIntoView();\n  });\n\n  return (\n    <div className={props.className}>\n      {log.map((entry, idx) => (\n        <pre key={idx}>{entry}</pre>\n      ))}\n      <div\n        ref={(el) => {\n          logEnd = el;\n        }}\n      />\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nimport ShareDB from \"sharedb/lib/client\";\nimport WebSocket from \"reconnecting-websocket\";\n\nconst server = \"ws://localhost:8080\";\n\nconst template = [\n  \"var lastPrint;\",\n  \"\",\n  \"function setup() {\",\n  \"  // put setup code here\",\n  \"  createCanvas(windowWidth, windowHeight);\",\n  \"  lastPrint = millis();\",\n  \"}\",\n  \"\",\n  \"function draw() {\",\n  \"  // put drawing code here\",\n  \"  background(220);\",\n  \"  circle(mouseX, mouseY, 100);\",\n  \"  \",\n  \"  if (millis() - lastPrint > 1000) {\",\n  '    print(\"X: \", mouseX, \" Y: \", mouseY);',\n  \"    lastPrint = millis();\",\n  \"  }\",\n  \"}\",\n];\n\nexport default function useShareDB(id) {\n  const [doc, setDoc] = useState(null);\n  const [data, setData] = useState({ sketch: [\"\"] });\n\n  useEffect(() => {\n    const socket = new WebSocket(server);\n    const connection = new ShareDB.Connection(socket);\n    const doc = connection.get(\"collection\", id);\n\n    doc.fetch(() => {\n      setDoc(doc);\n    });\n  }, [id]);\n\n  useEffect(() => {\n    if (doc) {\n      // create doc if it does not exist\n      if (!doc.type) {\n        doc.create({ sketch: template });\n      }\n\n      doc.subscribe(() => {\n        setData(doc.data);\n      });\n\n      return () => {\n        doc.unsubscribe();\n      };\n    }\n  }, [doc]);\n\n  const handleChange = (sketch, event) => {\n    console.log(event);\n\n    if (event === \"insert\") {\n    } else if (event === \"remove\") {\n    }\n  };\n\n  return [data.sketch.join(\"\\n\"), handleChange];\n}\n","import React, { useState, useRef } from \"react\";\n\nimport Sketch from \"./Sketch\";\nimport Editor from \"./Editor\";\nimport Log from \"./Log\";\nimport useShareDB from \"./useShareDB\";\n\nimport \"./App.css\";\n\nexport default function App({ id }) {\n  const [sketch, handleChange] = useShareDB(\"0\");\n  const [frozenSketch, setFrozenSketch] = useState(\"\");\n  const [log, setLog] = useState([]);\n\n  function startSketch() {\n    setLog([\"Starting Sketch...\"]);\n    setFrozenSketch(sketch);\n  }\n\n  function stopSketch() {\n    if (frozenSketch) {\n      setLog((log) => [...log, \"Sketch Stopped\"]);\n      setFrozenSketch(null);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Column\">\n        <div className=\"ButtonBar\">\n          <button className=\"StartButton\" onClick={startSketch}>\n            {\"\\u25B6\"}\n          </button>\n          <button className=\"StopButton\" onClick={stopSketch}>\n            {\"\\u25A0\"}\n          </button>\n        </div>\n        <Editor value={sketch} onChange={handleChange} />\n        <Log className=\"Log\" value={log} />\n      </div>\n      <div className=\"Column\">\n        <Sketch value={frozenSketch} setLog={setLog} />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App id={0} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}